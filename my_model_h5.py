# -*- coding: utf-8 -*-
"""my_model.h5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oun9piyw-efedbbiYbPQ3hNvoYkQS3My
"""

# 1. Import libraries and modules
from tensorflow import keras
from keras import layers
from keras.models import Sequential
from keras.layers import Dense, Dropout
import numpy as np
import pandas as pd
import os
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt

pip install streamlit

data_dir1 = 'ok'       # مسیر پوشه اول
data_dir2 = 'unok'      # مسیر پوشه دوم

import os
from PIL import Image
import numpy as np

# مسیر پوشه‌های هر کلاس
data_dir1 = 'ok'  # مسیر پوشه کلاس 1
data_dir2 = 'unok'  # مسیر پوشه کلاس 2

# لیست‌ها برای ذخیره تصاویر و برچسب‌ها
images = []
labels = []

# پردازش تصاویر از پوشه data_dir1 (کلاس 1)
for filename in os.listdir(data_dir1):
    if filename.endswith('.jpg') or filename.endswith('.png'):
        img_path = os.path.join(data_dir1, filename)

        # باز کردن و تغییر اندازه تصویر
        img = Image.open(img_path).resize((64, 64))
        img_array = np.array(img) / 255.0
        images.append(img_array)

        # افزودن لیبل 1 برای کلاس 1
        labels.append(1)

# پردازش تصاویر از پوشه data_dir2 (کلاس 2)
for filename in os.listdir(data_dir2):
    if filename.endswith('.jpg') or filename.endswith('.png'):
        img_path = os.path.join(data_dir2, filename)

        # باز کردن و تغییر اندازه تصویر
        img = Image.open(img_path).resize((64, 64))
        img_array = np.array(img) / 255.0
        images.append(img_array)

        # افزودن لیبل 2 برای کلاس 2
        labels.append(2)

# تبدیل لیست‌ها به آرایه numpy
images = np.array(images)
labels = np.array(labels)

print("ابعاد تصاویر:", images.shape)
print("ابعاد لیبل‌ها:", labels.shape)

from sklearn.model_selection import train_test_split

# تقسیم داده‌ها به مجموعه‌های آموزشی و اعتبارسنجی
x_train, x_val, y_train, y_val = train_test_split(images, labels, test_size=0.2, random_state=42)

print("ابعاد داده‌های آموزشی:", x_train.shape)
print("ابعاد داده‌های اعتبارسنجی:", x_val.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.optimizers import Adam

# ساخت مدل
model = Sequential()

# لایه کانولوشن (Convolutional Layer)
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))

# لایه Pooling
model.add(MaxPooling2D(pool_size=(2, 2)))

# لایه‌های اضافی
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # چون دو کلاس داریم

# کامپایل مدل
model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])

# آموزش مدل
history = model.fit(x_train, y_train, epochs=10, validation_data=(x_val, y_val), batch_size=32)

# ارزیابی مدل
test_loss, test_acc = model.evaluate(x_val, y_val)
print(f'دقت مدل روی داده‌های اعتبارسنجی: {test_acc}')

predictions = model.predict(x_val)

# تعداد نمونه‌ها (که در اینجا 5 است)
num_samples = x_val.shape[0]

# نمایش نتایج پیش‌بینی‌ها
print("پیش‌بینی‌ها برای داده‌های اعتبارسنجی:")
for i in range(num_samples):  # اینجا از همه نمونه‌ها پیش‌بینی می‌کنیم
    print(f"تصویر {i+1}: پیش‌بینی: {predictions[i]}, واقعی: {y_val[i]}")

# ذخیره مدل
model.save('my_model.h5')
print("مدل ذخیره شد.")

from tensorflow.keras.preprocessing import image
import numpy as np
from tensorflow.keras.models import load_model

# بارگذاری مدل (در صورتی که قبلاً ذخیره کرده باشید)
model = load_model('my_model.h5')

# بارگذاری و پیش‌پردازش تصویر جدید
img_path = 'reza'  # مسیر تصویر جدید
img = image.load_img(img_path, target_size=(64, 64))  # تغییر اندازه تصویر به همان اندازه که مدل نیاز دارد
img_array = image.img_to_array(img)  # تبدیل تصویر به آرایه numpy
img_array = np.expand_dims(img_array, axis=0)  # اضافه کردن بعد اضافی برای دسته‌بندی (batch_size)
img_array = img_array / 255.0  # نرمال‌سازی تصویر (همانطور که در مرحله آموزش انجام دادید)

# پیش‌بینی نوع تصویر
prediction = model.predict(img_array)

# نمایش نتیجه پیش‌بینی
if prediction < 0.5:
    print("تعجب کردم تو هوای تهران چرا انقد ریت سالمه")  # فرض بر این است که کلاس 1 به ارزش پیش‌بینی کمتر از 0.5 تعلق دارد
else:
    print(" تو معتاد نیستی فقط سرب تنفس میکنی")

# ذخیره مدل
model.save('my_model.h5')
print("مدل ذخیره شد.")

from tensorflow.keras.models import load_model

# بارگذاری مدل
loaded_model = load_model('my_model.h5')
print("مدل بارگذاری شد.")

